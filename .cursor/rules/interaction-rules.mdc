---
alwaysApply: true
---

## 总体描述

nextjs 前端项目，用户交互演示。交互的目的是让「小学生 456 年级和初中生」学习 AI 和其他相关知识

## 工程信息

- 用 framer-motion or react-three-fiber (three.js) 多加些动画，增加表现力
- 是给初中生/小学生用的，颜色鲜艳点，动画多点，美术风格活泼
- 文档放在 ./docs 中
- 没有用的文件改删就删
- 用路由分一下 url path，不要都在根目录
- 只在 3000 端口运行项目，不要用其他端口（如被占用可以停掉）
- 不要自动启动项目，我在终端手动启动看日志

- 拖拽交互 和 动态演示 要加细分

## 交互列表

四种：
1. 基础交互：选择题 / 填空题 / 快速对错判断 / 即时反馈结果
2. 拖拽交互
3. 动态演示
4. 探索式 / 沙盒交互 Playground

### 基础交互：选择题 / 填空题 / 快速对错判断 / 即时反馈结果

这种交互最常见，用来检测理解和加深记忆

### 拖拽交互
通过拖拽滑块、物体，观察实时变化。

例子：
- 概率：拖动滑块改变事件概率，立刻更新条件概率图表
- 基础数学：拖拽分数条拼接，理解分数加法
- 电学模拟：拖拽电池、电阻，搭电路
- 算法：拖拽节点，修改图结构，再运行最短路径算法

拖拽具体细分：
- 拖拽调整（参数/对象位置）
	通过拖动滑块、物体，实时调整某个参数或位置，观察结果变化
- 拖拽消除（匹配/合并/消除）
	类似「三消」或「配对」，通过拖动消除对象，强化概念联想
- 拖拽拼装（组合/构建）
	把零散元素拖拽到合适位置，拼成一个整体
    几何：拖拽三角形/矩形块 → 拼成一个大正方形，理解面积公式
    生物学：拖拽器官到人体图上 → 学习结构位置
    编程：拖拽代码块 → 搭建完整程序
- 拖拽排序（序列/层级）
- 拖拽分类（归类/匹配）


### 动态演示
核心是“看”的体验，让抽象概念变直观

例子：
- 概率论：动画展示分布函数如何随参数变化而改变
- 算法：排序动画：冒泡、快速排序逐步显示交换过程

动态演示细分：
- 过程演示（逐步展开）
    学生手动按下一步。一步一步动态呈现概念或公式推导过程
- 参数变化演示（函数/模型动态变化）
	展示参数变化对结果的影响，但由系统自动播放，而非用户拖拽
- 对比演示（并行可视化）
	把不同情况同时用动画展示，让差异直观显现
- 模拟演示（现象再现）
	模拟自然或工程现象的动态过程，强调感性直观
- 隐喻演示
	用直观、拟人的动画隐喻复杂概念，降低理解门槛
    例子：
        神经网络：动画显示「信号小球」在节点间传递
        概率：小球随机落下形成正态分布

### 探索式 / 沙盒交互 Playground

鼓励自由探索，不是“题目驱动”，而是“实验驱动”
例子：
    ●数学：自由拼搭几何形状，画图证明定理
    ●概率实验：掷骰子、抽牌实验，自己调整参数、做统计

总之是综合前面三个的基础上创建
